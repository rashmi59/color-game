[{"/Users/rashmisinha/Documents/GitHub/Psysocial/color-game/src/index.js":"1","/Users/rashmisinha/Documents/GitHub/Psysocial/color-game/src/App.js":"2","/Users/rashmisinha/Documents/GitHub/Psysocial/color-game/src/reportWebVitals.js":"3","/Users/rashmisinha/Documents/GitHub/Psysocial/color-game/src/Home.js":"4"},{"size":677,"mtime":1607318396664,"results":"5","hashOfConfig":"6"},{"size":579,"mtime":1607318402450,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1607283967972,"results":"8","hashOfConfig":"6"},{"size":3181,"mtime":1607317990546,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16w048y",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/rashmisinha/Documents/GitHub/Psysocial/color-game/src/index.js",[],"/Users/rashmisinha/Documents/GitHub/Psysocial/color-game/src/App.js",["20"],"/Users/rashmisinha/Documents/GitHub/Psysocial/color-game/src/reportWebVitals.js",[],["21","22"],"/Users/rashmisinha/Documents/GitHub/Psysocial/color-game/src/Home.js",["23","24","25","26"],"import './Home.css';\nimport React, {Component} from 'react';\nimport logo from './logo.svg';\nimport focus from './focus.gif'\n\nvar logs = {}\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gamestate : 0, //not started = 0, focus = 1, real image = 2, finished = 3\n            currentImage: -1,\n            blankscreen : false,\n            currTimeInMilliseconds: 0,\n            images: [\n                logo,\n                logo\n            ],\n            answer: [\n                0,\n                1\n            ] // 1 - present, 0 - absent\n        }\n    }\n\n    startGame() {\n        this.setState({gamestate : 1, blankscreen : true, currentImage: this.state.currentImage + 1, currTime : new Date().getTime() + 1000});\n        setTimeout(() => {\n            this.setState({blankscreen: false});\n        }, 500);\n        setTimeout(() => {\n            this.setState({gamestate: 2});\n        }, 1000);\n    }\n\n    respond() {\n        var currentImage = this.state.currentImage + 1;\n        if(currentImage < this.state.images.length) {\n            this.startGame();\n        } else {\n            this.setState({gamestate: 3});\n        }\n    }\n\n    targetFound(value) {\n        var respondTime = new Date().getTime();\n        var timeElapsed = respondTime - this.state.currTime;\n        console.log(timeElapsed);\n        var response = \"\";\n        if(this.state.answer[this.state.currentImage] == value) {\n            console.log(\"User Responded Correctly\")\n            response = \"User Responded Correctly\"\n        } else {\n            console.log(\"User Responded Incorrectly\")\n            response = \"User Responded Correctly\"\n        }\n\n        logs[this.state.currentImage] = [timeElapsed, response];\n        this.respond();\n    }\n\n    render() {\n        let display;\n        if(this.state.blankscreen) {\n            display = ''\n        } else {\n            switch(this.state.gamestate) {\n                case 0:\n                    display = <button type=\"button\" className=\"Button Text\" onClick={() => this.startGame()}>Start</button>\n                    break;\n                case 2:\n                    display = \n                    <div>\n                        <img src = {logo}/>\n                        <div class=\"ButtonArea\">\n                            <button type=\"button\" className=\"Button ButtonFound Text\" onClick={() => this.targetFound(1)}>Present</button>\n                            <button type=\"button\" className=\"Button ButtonNotFound Text\" onClick={() => this.targetFound(0)}>Not Present</button>\n                        </div>\n                    </div> \n                    break;\n                case 1:\n                    display = \n                    <div>\n                        <img className=\"Image\" src = {focus}/>\n                    </div> \n                    break;    \n                case 3:\n                    display = <div className=\"Text\">Game Over!</div>\n                    break;\n            }\n        }\n        return (          \n            <div class=\"container\" className=\"Home\">\n              {display}\n            </div>\n        );\n    }\n  }",{"ruleId":"27","severity":1,"message":"28","line":1,"column":8,"nodeType":"29","messageId":"30","endLine":1,"endColumn":12},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":50,"column":55,"nodeType":"37","messageId":"38","endLine":50,"endColumn":57},{"ruleId":"39","severity":1,"message":"40","line":67,"column":13,"nodeType":"41","messageId":"42","endLine":90,"endColumn":14},{"ruleId":"43","severity":1,"message":"44","line":74,"column":25,"nodeType":"45","endLine":74,"endColumn":44},{"ruleId":"43","severity":1,"message":"44","line":84,"column":25,"nodeType":"45","endLine":84,"endColumn":63},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["46"],"no-negated-in-lhs",["47"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]